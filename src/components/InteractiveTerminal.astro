---
// InteractiveTerminal.astro - Hidden terminal easter egg
---

<div id="terminal-root">
    <button id="terminal-toggle" class="terminal-toggle-btn" aria-label="Toggle Terminal">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <polyline points="4 17 10 11 4 5"></polyline>
            <line x1="12" y1="19" x2="20" y2="19"></line>
        </svg>
    </button>

    <div id="terminal-overlay" class="terminal-overlay">
        <div class="terminal-window-full">
            <div class="terminal-header-full">
                <span class="terminal-title-full">dejon@digitalgaines:~$</span>
                <button id="terminal-close" class="terminal-close-btn">×</button>
            </div>
            <div class="terminal-body-full">
                <div id="terminal-output" class="terminal-output-full"></div>
                <div class="terminal-input-line">
                    <span class="terminal-prompt">$</span>
                    <input type="text" id="terminal-input" class="terminal-input" autocomplete="off" spellcheck="false" />
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .terminal-toggle-btn {
        position: fixed;
        bottom: 2rem;
        right: 2rem;
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: var(--text-primary);
        color: white;
        border: none;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        transition: all 0.3s;
        z-index: 999;
    }

    .terminal-toggle-btn:hover {
        transform: scale(1.1);
        box-shadow: 0 6px 16px rgba(0,0,0,0.4);
    }

    .terminal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.8);
        display: none;
        z-index: 1000;
        align-items: center;
        justify-content: center;
        backdrop-filter: blur(4px);
    }

    .terminal-overlay.active {
        display: flex;
    }

    .terminal-window-full {
        width: 90%;
        max-width: 900px;
        height: 600px;
        background: #1e1e1e;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 20px 60px rgba(0,0,0,0.5);
        display: flex;
        flex-direction: column;
    }

    .terminal-header-full {
        background: #323232;
        padding: 1rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .terminal-title-full {
        color: #b4b4b4;
        font-family: 'Courier New', monospace;
        font-size: 0.9rem;
    }

    .terminal-close-btn {
        background: #ff5f56;
        border: none;
        color: white;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        cursor: pointer;
        font-size: 1.2rem;
        line-height: 1;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .terminal-body-full {
        flex: 1;
        padding: 1.5rem;
        overflow-y: auto;
        font-family: 'Courier New', monospace;
        color: #00ff00;
        font-size: 0.95rem;
    }

    .terminal-output-full {
        margin-bottom: 1rem;
    }

    .terminal-line {
        margin-bottom: 0.5rem;
        line-height: 1.6;
    }

    .terminal-command {
        color: #ffffff;
    }

    .terminal-result {
        color: #00d9ff;
        margin-left: 1rem;
    }

    .terminal-input-line {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .terminal-prompt {
        color: #00ff00;
    }

    .terminal-input {
        flex: 1;
        background: transparent;
        border: none;
        color: #ffffff;
        font-family: 'Courier New', monospace;
        font-size: 0.95rem;
        outline: none;
    }

    .terminal-error {
        color: #ff6b6b;
    }

    @media (max-width: 768px) {
        .terminal-window-full {
            width: 95%;
            height: 80vh;
        }
    }
</style>

<script>
    const commands = {
        help: 'Available commands:\n  help - Show this message\n  about - Learn about me\n  skills - View my technical skills\n  experience - See my work history\n  achievements - View key accomplishments\n  contact - Get my contact information\n  github - Visit my GitHub\n  linkedin - Visit my LinkedIn\n  clear - Clear the terminal',
        
        about: 'DeJon Gaines\nChief Information Officer at Conduent\n\nTransforming enterprise technology through innovative AI implementation, cloud architecture, and strategic leadership. Leading 2,000+ IT professionals managing $900M technology budget.',
        
        skills: 'Technical Skills:\n  • Enterprise Architecture & Cloud Infrastructure\n  • AI/ML Implementation & Strategy\n  • Digital Transformation Leadership\n  • DevOps & Agile Methodologies\n  • Cybersecurity & Compliance (ISO 27001, NIST, SOX)\n  • Infrastructure as Code (Terraform, Ansible, Kubernetes)',
        
        experience: 'Work Experience:\n\n[2020-Present] Chief Information Officer - Conduent\n  → Leading technology strategy for 65,000 employees\n  → Managing $900M technology budget\n\n[2017-2020] Vice President - Conduent\n  → Drove $25M in operational savings\n  → 100-point NPS increase\n\n[2010-2016] VP IT Service Management - Xerox\n  → $12M annual cost savings\n  → 60% reduction in MTTR',
        
        achievements: 'Key Achievements:\n  ✓ $54M in annual savings generated\n  ✓ 25,000+ associates impacted globally\n  ✓ Reduced handle time from 12min to 7.5min (37.5%)\n  ✓ 45% improvement in first-call resolution\n  ✓ Real-time AI translation deployed\n  ✓ 60% faster software deployment\n  ✓ Multiple CEO/President awards',
        
        contact: 'Contact Information:\n  Email: dejon.gaines@outlook.com\n  Location: Lexington, Kentucky\n  LinkedIn: linkedin.com/in/dejon-gaines',
        
        github: 'Opening GitHub... (Feature coming soon!)',
        
        linkedin: 'Opening LinkedIn profile...\n→ https://linkedin.com/in/dejon-gaines',
        
        clear: 'CLEAR'
    };

    function initInteractiveTerminal() {
        const toggleBtn = document.getElementById('terminal-toggle');
        const closeBtn = document.getElementById('terminal-close');
        const overlay = document.getElementById('terminal-overlay');
        const input = document.getElementById('terminal-input');
        const output = document.getElementById('terminal-output');

        if (!toggleBtn || !overlay || !input || !output) return;

        // Welcome message
        const welcomeMsg = `
<div class="terminal-line">
<span style="color: #00d9ff;">╔════════════════════════════════════════╗</span>
<span style="color: #00d9ff;">║   Welcome to DeJon's Terminal! 🚀     ║</span>
<span style="color: #00d9ff;">╚════════════════════════════════════════╝</span>

Type <span style="color: #ffff00;">'help'</span> to see available commands.
</div>`;

        // Toggle terminal
        toggleBtn?.addEventListener('click', () => {
            overlay.classList.add('active');
            if (output.innerHTML === '') {
                output.innerHTML = welcomeMsg;
            }
            input.focus();
        });

        closeBtn?.addEventListener('click', () => {
            overlay.classList.remove('active');
        });

        overlay?.addEventListener('click', (e) => {
            if (e.target === overlay) {
                overlay.classList.remove('active');
            }
        });

        // Handle commands
        input?.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                const command = input.value.trim().toLowerCase();
                if (command) {
                    // Display command
                    const cmdLine = document.createElement('div');
                    cmdLine.className = 'terminal-line';
                    cmdLine.innerHTML = `<span class="terminal-prompt">$</span> <span class="terminal-command">${command}</span>`;
                    output.appendChild(cmdLine);

                    // Execute command
                    if (command === 'clear') {
                        output.innerHTML = '';
                    } else if (commands[command]) {
                        const result = document.createElement('div');
                        result.className = 'terminal-line terminal-result';
                        result.innerHTML = commands[command].replace(/\n/g, '<br>');
                        output.appendChild(result);
                    } else {
                        const error = document.createElement('div');
                        error.className = 'terminal-line terminal-error';
                        error.textContent = `Command not found: ${command}. Type 'help' for available commands.`;
                        output.appendChild(error);
                    }

                    input.value = '';
                    output.scrollTop = output.scrollHeight;
                }
            }
        });
    }

    // Initialize
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initInteractiveTerminal);
    } else {
        initInteractiveTerminal();
    }
</script>