---
// InteractiveTerminal.astro - Hidden terminal easter egg
---

<div id="terminal-root">
    <button id="terminal-toggle" class="terminal-toggle-btn" aria-label="Toggle Terminal">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <polyline points="4 17 10 11 4 5"></polyline>
            <line x1="12" y1="19" x2="20" y2="19"></line>
        </svg>
    </button>

    <div id="terminal-overlay" class="terminal-overlay">
        <div class="terminal-window-full">
            <div class="terminal-header-full">
                <span class="terminal-title-full">dejon@digitalgaines:~$</span>
                <button id="terminal-close" class="terminal-close-btn">×</button>
            </div>
            <div class="terminal-body-full">
                <div id="terminal-output" class="terminal-output-full"></div>
                <div class="terminal-input-line">
                    <span class="terminal-prompt">$</span>
                    <input type="text" id="terminal-input" class="terminal-input" autocomplete="off" spellcheck="false" />
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .terminal-toggle-btn {
        position: fixed;
        bottom: 2rem;
        right: 2rem;
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: var(--text-primary);
        color: white;
        border: none;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        transition: all 0.3s;
        z-index: 999;
    }

    .terminal-toggle-btn:hover {
        transform: scale(1.1);
        box-shadow: 0 6px 16px rgba(0,0,0,0.4);
    }

    .terminal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.85);
        display: none;
        z-index: 1000;
        align-items: center;
        justify-content: center;
        backdrop-filter: blur(4px);
    }

    .terminal-overlay.active {
        display: flex;
    }

    .terminal-window-full {
        width: 90%;
        max-width: 900px;
        height: 600px;
        background: #1e1e1e;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 20px 60px rgba(0,0,0,0.5);
        display: flex;
        flex-direction: column;
    }

    .terminal-header-full {
        background: #323232;
        padding: 1rem 1.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #424242;
    }

    .terminal-title-full {
        color: #c9d1d9;
        font-family: 'Courier New', monospace;
        font-size: 0.9rem;
        font-weight: 500;
    }

    .terminal-close-btn {
        background: #ff5f56;
        border: none;
        color: white;
        width: 22px;
        height: 22px;
        border-radius: 50%;
        cursor: pointer;
        font-size: 1.3rem;
        line-height: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        transition: opacity 0.2s;
    }

    .terminal-close-btn:hover {
        opacity: 0.8;
    }

    .terminal-body-full {
        flex: 1;
        padding: 1.5rem;
        overflow-y: auto;
        font-family: 'Courier New', monospace;
        font-size: 0.95rem;
        background: #1e1e1e;
    }

    .terminal-output-full {
        margin-bottom: 1rem;
        white-space: pre-wrap;
        word-wrap: break-word;
    }

    .terminal-line {
        margin-bottom: 0.75rem;
        line-height: 1.6;
        color: #ffffff;
    }

    .terminal-command {
        color: #ffffff;
    }

    .terminal-result {
        color: #ffffff;
        white-space: pre-wrap;
    }

    .terminal-input-line {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        padding-top: 0.5rem;
        border-top: 1px solid #30363d;
    }

    .terminal-prompt {
        color: #7ee787;
        font-weight: bold;
    }

    .terminal-input {
        flex: 1;
        background: transparent;
        border: none;
        color: #ffffff;
        font-family: 'Courier New', monospace;
        font-size: 0.95rem;
        outline: none;
        caret-color: #7ee787;
    }

    .terminal-error {
        color: #ff7b72;
    }

    /* Scrollbar styling */
    .terminal-body-full::-webkit-scrollbar {
        width: 8px;
    }

    .terminal-body-full::-webkit-scrollbar-track {
        background: #161b22;
    }

    .terminal-body-full::-webkit-scrollbar-thumb {
        background: #30363d;
        border-radius: 4px;
    }

    .terminal-body-full::-webkit-scrollbar-thumb:hover {
        background: #484f58;
    }

    @media (max-width: 768px) {
        .terminal-window-full {
            width: 95%;
            height: 80vh;
        }

        .terminal-body-full {
            font-size: 0.85rem;
            padding: 1rem;
        }
    }
/* Light mode terminal styles */
[data-theme="light"] .terminal-window-full {
    background: #f6f8fa;
}

[data-theme="light"] .terminal-header-full {
    background: #e1e4e8;
    border-bottom: 1px solid #d1d5da;
}

[data-theme="light"] .terminal-title-full {
    color: #24292e;
}

[data-theme="light"] .terminal-body-full {
    background: #ffffff;
}

[data-theme="light"] .terminal-line {
    color: #24292e;
}

[data-theme="light"] .terminal-command {
    color: #ffffff;
}

[data-theme="light"] .terminal-result {
    color: #ffffff !important;
}

[data-theme="light"] .terminal-prompt {
    color: #22863a;
}

[data-theme="light"] .terminal-error {
    color: #d73a49;
}

[data-theme="light"] .terminal-input {
    color: #24292e;
    caret-color: #22863a;
}

[data-theme="light"] .terminal-input-line {
    border-top: 1px solid #e1e4e8;
}

/* Light mode scrollbar */
[data-theme="light"] .terminal-body-full::-webkit-scrollbar-track {
    background: #f6f8fa;
}

[data-theme="light"] .terminal-body-full::-webkit-scrollbar-thumb {
    background: #d1d5da;
}

[data-theme="light"] .terminal-body-full::-webkit-scrollbar-thumb:hover {
    background: #959da5;
}
    
</style>

<script>
    const commands = {
  help: `Available commands:
  help - Show this message
  philosophy - My leadership approach
  transformation - View transformation methodology
  skills - Technical capabilities
  impact - Key achievements & metrics
  strategy - Strategic approach to change
  contact - Get in touch
  linkedin - Visit my LinkedIn
  clear - Clear the terminal`,

  philosophy: `Leadership Philosophy:

"The best transformations don't just modernize technology—they reimagine 
how organizations create value."

Core Beliefs:
  → Transformation requires both strategic vision and tactical excellence
  → Success happens at the intersection of innovation, execution, and culture
  → The best leaders stay hands-on while maintaining strategic altitude
  → Teams thrive when technical excellence and business outcomes are inseparable`,

  transformation: `Transformation Methodology:

1. UNDERSTAND THE BUSINESS CONTEXT
   → What problem are we really solving?
   → How does this create competitive advantage?

2. BUILD THE RIGHT TEAM & CULTURE
   → High-performance teams across geographies
   → Culture of innovation and accountability

3. ARCHITECT FOR SCALE
   → Cloud-native infrastructure
   → AI/ML integration at the right points
   → Data-driven decision making

4. MEASURE WHAT MATTERS
   → Focus on business outcomes, not technology metrics
   → Sustainable competitive advantage
   → Quantifiable value generation`,

  skills: `Technical Capabilities:

Enterprise Architecture:
  → Cloud Infrastructure (AWS, Azure, Multi-cloud)
  → Infrastructure as Code (Terraform, Ansible, Kubernetes)
  → Microservices & Containerization

AI & Innovation:
  → Generative AI Implementation
  → Real-time AI Translation Systems
  → Agent Assist Technology
  → ML Model Deployment

Strategic Leadership:
  → Digital Transformation at Scale
  → Agile/DevOps Transformation
  → $900M Budget Management
  → Global Team Leadership (2,000+ professionals)

Security & Compliance:
  → ISO 27001, NIST, SOX
  → Enterprise Cybersecurity
  → Audit & Risk Management`,

  impact: `Transformation Impact:

Financial:
  ✓ $54M in annual savings generated
  ✓ $25M operational savings from IT roadmap
  ✓ $12M cost savings through service optimization

Operational:
  ✓ 37.5% reduction in average handle time
  ✓ 45% improvement in first-call resolution
  ✓ 60% faster software deployment
  ✓ 60% reduction in mean time to resolution

Scale:
  ✓ 25,000+ associates impacted globally
  ✓ 2,000+ enterprise clients served
  ✓ $900M technology budget managed
  ✓ 2,000+ IT professionals led

Strategic:
  ✓ 100-point Net Promoter Score increase
  ✓ Contract renewals: 82% → 95%
  ✓ Real-time AI translation deployed
  ✓ Next-gen cloud platform architected`,

  strategy: `Strategic Approach to Technology Change:

THE FRAMEWORK:
  
  1. START WITH WHY
     → Business outcomes drive technology decisions
     → Sustainable competitive advantage is the goal
  
  2. CULTURE EATS STRATEGY
     → Technology transformation is people transformation
     → Create conditions where teams choose better ways
  
  3. MEASURE WHAT MATTERS
     → Metrics should drive action, not just report status
     → Focus on outcomes over outputs
  
  4. SCALE WITH INTENTION
     → What works at 100 users rarely works at 25,000
     → Architecture for today, design for tomorrow
  
  5. STAY HANDS-ON
     → The best leaders remove obstacles and accelerate execution
     → Strategic altitude + tactical excellence = transformation`,

  contact: `Let's Connect:

Email: dejon.gaines@outlook.com
Location: Lexington, Kentucky

Interested in:
  → Technology transformation consulting
  → Speaking engagements
  → Strategic advisory roles
  → Board positions

LinkedIn: linkedin.com/in/dejon-gaines`,

  linkedin: `Opening LinkedIn profile...
→ https://linkedin.com/in/dejon-gaines`,

  clear: 'CLEAR'
};

    function initInteractiveTerminal() {
        const toggleBtn = document.getElementById('terminal-toggle');
        const closeBtn = document.getElementById('terminal-close');
        const overlay = document.getElementById('terminal-overlay');
        const input = document.getElementById('terminal-input');
        const output = document.getElementById('terminal-output');

        if (!toggleBtn || !overlay || !input || !output) return;

        // Welcome message
       const welcomeMessage = `
<div class="terminal-line" style="text-align: center; margin: 2rem 0;">
<span style="color: #7ee787; font-weight: bold; font-size: 1.1rem;">Welcome to DeJon's Terminal! 🚀</span>

<div style="margin-top: 1rem; color: #c9d1d9;">Type <span style="color: #ffa657; font-weight: bold;">'help'</span> to explore my transformation philosophy.</div>
</div>`;

        // Toggle terminal
        toggleBtn?.addEventListener('click', () => {
            overlay.classList.add('active');
            if (output.innerHTML === '') {
                output.innerHTML = welcomeMessage;
            }
            input.focus();
        });

        closeBtn?.addEventListener('click', () => {
            overlay.classList.remove('active');
        });

        overlay?.addEventListener('click', (e) => {
            if (e.target === overlay) {
                overlay.classList.remove('active');
            }
        });

        // Handle commands
        input?.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                const command = input.value.trim().toLowerCase();
                if (command) {
                    // Display command
                    const cmdLine = document.createElement('div');
                    cmdLine.className = 'terminal-line';
                    cmdLine.innerHTML = `<span class="terminal-prompt">$</span> <span class="terminal-command">${command}</span>`;
                    output.appendChild(cmdLine);

                    // Execute command
                    if (command === 'clear') {
                        output.innerHTML = '';
                    } else if (commands[command]) {
                        const result = document.createElement('div');
                        result.className = 'terminal-line terminal-result';
                        result.innerHTML = commands[command].replace(/\n/g, '<br>');
                        output.appendChild(result);
                    } else {
                        const error = document.createElement('div');
                        error.className = 'terminal-line terminal-error';
                        error.textContent = `Command not found: ${command}. Type 'help' for available commands.`;
                        output.appendChild(error);
                    }

                    input.value = '';
                    output.scrollTop = output.scrollHeight;
                }
            }
        });
    }

    // Initialize
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initInteractiveTerminal);
    } else {
        initInteractiveTerminal();
    }
</script>